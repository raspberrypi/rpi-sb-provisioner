<!DOCTYPE html>
<html>
<head>
    <title>Configuration Options</title>
    <%view stylesheet %>
    <style>
        .collapsible {
            background-color: #f1f1f1;
            color: #444;
            cursor: pointer;
            padding: 5px 10px;
            border: none;
            text-align: left;
            outline: none;
            font-size: 12px;
            margin-left: 10px;
            border-radius: 4px;
            display: inline-block;
            vertical-align: middle;
        }
        
        .active, .collapsible:hover {
            background-color: #ddd;
        }
        
        .help-content {
            padding: 0 18px;
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.2s ease-out;
            background-color: #f9f9f9;
            margin-top: 5px;
            border-radius: 4px;
            clear: both;
        }
        
        .help-content p {
            margin: 10px 0;
            font-size: 14px;
            line-height: 1.4;
        }
        
        .warning {
            color: #cc0000;
            font-weight: bold;
        }
        
        .note {
            color: #0066cc;
            font-weight: bold;
        }
        
        .option-header {
            margin-bottom: 5px;
        }
        
        label {
            display: inline-block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        .help-button {
            background-color: #f1f1f1;
            color: #444;
            cursor: pointer;
            padding: 5px 10px;
            border: none;
            text-align: left;
            outline: none;
            font-size: 12px;
            margin-left: 10px;
            border-radius: 4px;
            display: inline-block;
            vertical-align: middle;
        }
        
        .help-button:hover {
            background-color: #ddd;
        }
        
        /* The Modal Background */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.4);
            overflow: auto;
        }
        
        /* Modal Content */
        .modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 70%;
            max-width: 700px;
            border-radius: 5px;
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
            position: relative;
        }
        
        /* Close Button */
        .close-modal {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .close-modal:hover,
        .close-modal:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        
        .modal-title {
            margin-top: 0;
            color: #333;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }
        
        .modal-body {
            max-height: 60vh;
            overflow-y: auto;
            padding-right: 5px;
        }
        
        .modal-body p {
            margin: 10px 0;
            font-size: 14px;
            line-height: 1.5;
        }
        
        .cust-btn-lg {
            margin-top: 20px;
        }
    </style>
    <script>
        function showSuccess() {
            document.getElementById('success-message').style.display = 'block';
            setTimeout(() => {
                document.getElementById('success-message').style.display = 'none';
            }, 3000);
        }
    </script>
</head>
<body>
    <%view navbar %>

    <h1>Configuration Options</h1>
    
    <div id="success-message" class="success-message">
        Options saved successfully!
    </div>
    
    <div id="error-message" class="error-message"></div>

    <div class="options-form">
        <form id="optionsForm" onsubmit="event.preventDefault(); saveOptions();">
            <%c++ 
            auto options = @@.get<std::map<std::string, std::string>>("options");
            for(const auto& option : options) {
                const auto& key = option.first;
                const auto& value = option.second;
            %>
                <div class="form-group">
                    <div class="option-header">
                        <label for="<%c++ $$ << key; %>"><%c++ $$ << key; %></label>
                        <button type="button" class="help-button" data-target="modal-<%c++ $$ << key; %>">Help</button>
                    </div>
                    <%c++ if(key == "PROVISIONING_STYLE") { %>
                    <select id="<%c++ $$ << key; %>" name="<%c++ $$ << key; %>">
                        <option value="secure-boot" <%c++ if(value == "secure-boot") $$ << "selected"; %>>secure-boot</option>
                        <option value="fde-only" <%c++ if(value == "fde-only") $$ << "selected"; %>>fde-only</option>
                        <option value="naked" <%c++ if(value == "naked") $$ << "selected"; %>>naked</option>
                    </select>
                    <%c++ } else if(key == "RPI_DEVICE_STORAGE_TYPE") { %>
                    <select id="<%c++ $$ << key; %>" name="<%c++ $$ << key; %>">
                        <option value="sd" <%c++ if(value == "sd") $$ << "selected"; %>>sd</option>
                        <option value="emmc" <%c++ if(value == "emmc") $$ << "selected"; %>>emmc</option>
                        <option value="nvme" <%c++ if(value == "nvme") $$ << "selected"; %>>nvme</option>
                    </select>
                    <%c++ } else if(key == "RPI_DEVICE_STORAGE_CIPHER") { %>
                    <select id="<%c++ $$ << key; %>" name="<%c++ $$ << key; %>">
                        <option value="aes-xts-plain64" <%c++ if(value == "aes-xts-plain64") $$ << "selected"; %>>aes-xts-plain64</option>
                        <option value="xchacha12,aes-adiantum-plain64" <%c++ if(value == "xchacha12,aes-adiantum-plain64") $$ << "selected"; %>>xchacha12,aes-adiantum-plain64</option>
                    </select>
                    <%c++ } else if(key == "RPI_DEVICE_FAMILY") { %>
                    <select id="<%c++ $$ << key; %>" name="<%c++ $$ << key; %>">
                        <option value="4" <%c++ if(value == "4") $$ << "selected"; %>>4</option>
                        <option value="5" <%c++ if(value == "5") $$ << "selected"; %>>5</option>
                        <option value="2W" <%c++ if(value == "2W") $$ << "selected"; %>>2W</option>
                    </select>
                    <%c++ } else if(key == "RPI_DEVICE_FIRMWARE_FILE") { %>
                    <div>
                        <input type="hidden" id="<%c++ $$ << key; %>" name="<%c++ $$ << key; %>" value="<%c++ $$ << value; %>">
                        <%c++ if(!value.empty()) { %>
                            <div style="margin-bottom: 10px; padding: 10px; background-color: #e9ecef; border-radius: 4px; font-size: 14px;">
                                <strong>Currently selected:</strong><br>
                                <code><%c++ $$ << value; %></code>
                            </div>
                        <%c++ } else { %>
                            <div style="margin-bottom: 10px; padding: 10px; background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 4px; font-size: 14px; color: #856404;">
                                <strong>No firmware selected</strong> - System will use default firmware
                            </div>
                        <%c++ } %>
                        <a href="/options/firmware" target="_blank" class="cust-btn cust-btn-primary">Select Firmware</a>
                    </div>
                    <%c++ } else if(key == "RPI_DEVICE_LOCK_JTAG" || key == "RPI_DEVICE_EEPROM_WP_SET") { %>
                    <input type="checkbox" id="<%c++ $$ << key; %>" name="<%c++ $$ << key; %>" <%c++ if(!value.empty()) $$ << "checked"; %>>
                    <label for="<%c++ $$ << key; %>" style="font-weight: normal; display: inline;">Enable</label>
                    <%c++ } else { %>
                    <input type="text" id="<%c++ $$ << key; %>" name="<%c++ $$ << key; %>" value="<%c++ $$ << value; %>">
                    <%c++ } %>
                </div>
            <%c++ } %>
            <button type="submit" class="cust-btn cust-btn-success cust-btn-lg">Save Options</button>
        </form>
    </div>

    <!-- Modal Help Windows -->
    <%c++ 
    for(const auto& option : options) {
        const auto& key = option.first;
    %>
    <div id="modal-<%c++ $$ << key; %>" class="modal">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <h3 class="modal-title"><%c++ $$ << key; %></h3>
            <div class="modal-body">
            <%c++ if(key == "PROVISIONING_STYLE") { %>
                <p><strong>Mandatory, with a default</strong></p>
                <p>Select the provisioning style you wish to use. Supported values are <code>secure-boot</code>, <code>fde-only</code> and <code>naked</code>.</p>
                <p>If <code>PROVISIONING_STYLE</code> is not specified, it defaults to <code>secure-boot</code>.</p>
            <%c++ } else if(key == "CUSTOMER_KEY_FILE_PEM") { %>
                <p><strong>Optional, mandatory if CUSTOMER_KEY_PKCS11_NAME is not set</strong></p>
                <p>The fully qualified path to your signing key. This file is expected to contain an RSA 2048-bit Private Key, encoded in PEM format.</p>
                <p class="warning">This file should be considered key material, and should be protected while at rest and in use according to your threat model.</p>
            <%c++ } else if(key == "CUSTOMER_KEY_PKCS11_NAME") { %>
                <p><strong>Optional, mandatory if CUSTOMER_KEY_FILE_PEM is not set</strong></p>
                <p>The keypair alias for a PKCS11 keypair, typically stored on a Hardware Security Module (HSM) and provided through a helper tool.</p>
                <p>This is expected to act in place of the RSA 2048-bit Private key specified with CUSTOMER_KEY_FILE_PEM, and will be used as the signing device for all future pre-boot authentication images.</p>
                <p>The value should take the format:</p>
                <p><code>"pkcs11:object=&lt;keypair-alias&gt;;type=private"</code></p>
                <p class="warning">You must use double quotes to enclose the value.</p>
                <p class="warning">The PKCS11 provider, and it's associated HSM, should be considered key material and should be protected while at rest and in use according to your threat model.</p>
            <%c++ } else if(key == "GOLD_MASTER_OS_FILE") { %>
                <p><strong>Mandatory</strong></p>
                <p>This should be your 'gold master' OS image.
                <p>No customisation should be present in this image that you would not expect to be deployed to your entire fleet.</p>
                <p><code>rpi-sb-provisioner</code> assumes this image has been created using <code>pi-gen</code>, and using a non-<code>pi-gen</code> image may produce undefined behaviour.</p>
                <p class="warning">This file <strong>must</strong> be the uncompressed image.</p>
            <%c++ } else if(key == "RPI_DEVICE_STORAGE_TYPE") { %>
                <p><strong>Mandatory</strong></p>
                <p>Specify the kind of storage your target will use. Supported values are:</p>
                <ul>
                    <li><code>sd</code> - SD card storage</li>
                    <li><code>emmc</code> - eMMC storage</li>
                    <li><code>nvme</code> - NVMe storage</li>
                </ul>
            <%c++ } else if(key == "RPI_DEVICE_STORAGE_CIPHER") { %>
                <p><strong>Optional</strong></p>
                <p>Specify the full-disk-encryption cipher.</p>
                <p>Supported values are <code>aes-xts-plain64</code>, <code>xchacha12,aes-adiantum-plain64</code>.</p>
                <p>If <code>RPI_DEVICE_STORAGE_CIPHER</code> is not specified, it defaults to <code>aes-xts-plain64</code>.</p>
                <p><code>aes-xts-plain64</code> is recommended for Raspberry Pi 5 family devices (including Compute Module 5).</p>
                <p>All other Raspberry Pi devices are recommended to use <code>xchacha12,aes-adiantum-plain64</code> for performance reasons.</p>
            <%c++ } else if(key == "RPI_DEVICE_FAMILY") { %>
                <p><strong>Mandatory</strong></p>
                <p>Specify the family of Raspberry Pi device you are provisioning. Supported values are <code>4</code>, <code>5</code>, <code>2W</code>. For example,</p>
                <ul>
                    <li>A Raspberry Pi Compute Module 4 would be family <code>4</code></li>
                    <li>A Raspberry Pi 5 would be family <code>5</code></li>
                    <li>A Raspberry Pi Compute Module 5 would be family <code>5</code></li>
                    <li>A Raspberry Pi Zero 2 W would be family <code>2W</code></li>
                </ul>
            <%c++ } else if(key == "RPI_DEVICE_BOOTLOADER_CONFIG_FILE") { %>
                <p><strong>Mandatory, with a default</strong></p>
                <p class="warning"><code>rpi-sb-provisioner</code> will ignore the Raspberry Pi Bootloader configuration built by <code>pi-gen</code>, and use the one provided in this variable.</p>
                <p>Specify the Raspberry Pi Bootloader configuration you want your provisioned devices to use. A default is provided.</p>
                <p>Further information on the format of this configuration file can be found in the Raspberry Pi Documentation, at <a href="https://www.raspberrypi.com/documentation/computers/config_txt.html" target="_blank">https://www.raspberrypi.com/documentation/computers/config_txt.html</a></p>
            <%c++ } else if(key == "RPI_DEVICE_FIRMWARE_FILE") { %>
                <p><strong>Optional</strong></p>
                <p>Specify an explicit path to a specific pieeprom firmware file to use during provisioning.</p>
                <p>When set, the provisioning system will use the exact firmware file specified. If not set, the system will automatically select the latest firmware from the 'default' release channel.</p>
                <p>Example: <code>/lib/firmware/raspberrypi/bootloader-2712/default/pieeprom-2025-05-08.bin</code></p>
                <p>This setting is typically configured through the firmware selection interface (click "Select Firmware" button) rather than manually entering a path.</p>
                <p class="warning">Ensure the specified firmware file exists and is compatible with your target device family before provisioning.</p>
            <%c++ } else if(key == "RPI_DEVICE_LOCK_JTAG") { %>
                <p><strong>Optional</strong></p>
                <p>Raspberry Pi devices have a mechanism to restrict JTAG access to the device.</p>
                <p>Note that using this function will prevent Raspberry Pi engineers from being able to assist in debugging your device, should you request assitance.</p>
                <p>Set to any value to enable the JTAG restrictions.</p>
            <%c++ } else if(key == "RPI_DEVICE_EEPROM_WP_SET") { %>
                <p><strong>Optional</strong></p>
                <p>Raspberry Pi devices that use an EEPROM as part of their boot flow can configure that EEPROM to enable write protection - preventing modification.</p>
                <p>Set to any value to enable EEPROM write protection.</p>
            <%c++ } else if(key == "RPI_DEVICE_FETCH_METADATA") { %>
                <p><strong>Deprecated</strong></p>
                <p>This configuration option is no longer available. rpi-sb-provisioner will always collect metadata from each device that is provisioned.</p>
                <p>Collected metadata includes board type, revision number, processor name, memory configuration, manufacturer information, and other device-specific details.</p>
                <p>This data is automatically inserted into device logs and stored in the manufacturing database when configured with RPI_SB_PROVISIONER_MANUFACTURING_DB.</p>
            <%c++ } else if(key == "RPI_DEVICE_RETRIEVE_KEYPAIR") { %>
                <p><strong>Optional</strong></p>
                <p>Specify a directory to copy the device unique keypair to. The keys will be named &lt;serial&gt;.der and &lt;serial&gt;.pub</p>
                <p>Set to the path of a directory to use, otherwise keys will be stored alongside provisioning logs in a directory named "keypair".</p>
                <p class="note">These keys are sensitive key material, and you must ensure they are handled appropriately.</p>
            <%c++ } else if(key == "RPI_SB_WORKDIR") { %>
                <p><strong>Optional</strong></p>
                <p class="warning">If you do not set this variable, your modified OS intermediates will not be stored, and will be unavailable for inspection.</p>
                <p>Set to a location to cache OS assets between provisioning sessions. Recommended for use in production. For example:</p>
                <p><code>RPI_SB_WORKDIR=/srv/rpi-sb-provisioner/</code></p>
            <%c++ } else if(key == "RPI_SB_PROVISIONER_MANUFACTURING_DB") { %>
                <p><strong>Mandatory</strong></p>
                <p>Store manufacturing data in a sqlite3 database.</p>
                <p>Set to the path of a file to contain a SQLite database stored on local storage.</p>
                <p>Defaults to /srv/rpi-sb-provisioner/manufacturing.db</p>
                <p>The manufacturing database will include:
                <ul>
                    <li>Board name</li>
                    <li>Board serial</li>
                    <li>Ethernet MAC address</li>
                    <li>WiFi MAC Address (if populated)</li>
                    <li>Bluetooth MAC Address (if populated)</li>
                    <li>eMMC Size (in bytes)</li>
                    <li>eMMC Card ID</li>
                    <li>Raspberry Pi Device Unique Identifier</li>
                    <li>Board revision</li>
                    <li>The processor name</li>
                    <li>The size of the fitted RAM</li>
                    <li>The physical board manufacturer</li>
                </ul>
                </p>
                <p>You must not specify the path of a database stored on a network drive or similar storage, as this mechanism is only safe to use on a single provisioning system.</p>
                <p>For merging the output with multiple provisioning systems, consider "Processing the manufacturing database" later in the README.</p>

            <%c++ } else { %>
                <p>No specific documentation available for this option.</p>
            <%c++ } %>
            </div>
        </div>
    </div>
    <%c++ } %>

    <script>
        // Set up modal help sections
        const helpButtons = document.querySelectorAll('.help-button');
        const modals = document.querySelectorAll('.modal');
        const closeButtons = document.querySelectorAll('.close-modal');
        
        helpButtons.forEach(button => {
            button.addEventListener('click', function() {
                const targetModalId = this.getAttribute('data-target');
                document.getElementById(targetModalId).style.display = 'block';
            });
        });
        
        closeButtons.forEach(button => {
            button.addEventListener('click', function() {
                const modal = this.closest('.modal');
                modal.style.display = 'none';
            });
        });
        
        // Close modal when clicking outside of modal content
        window.addEventListener('click', function(event) {
            modals.forEach(modal => {
                if (event.target == modal) {
                    modal.style.display = 'none';
                }
            });
        });
        
        async function saveOptions() {
            const form = document.getElementById('optionsForm');
            const formData = new FormData(form);
            const options = {};
            
            // Get all form elements to handle checkboxes properly
            const formElements = form.elements;
            for (let i = 0; i < formElements.length; i++) {
                const element = formElements[i];
                if (element.name && element.name !== '') {
                    if (element.type === 'checkbox') {
                        options[element.name] = element.checked ? "1" : "";
                    } else {
                        options[element.name] = element.value;
                    }
                }
            }

            try {
                const response = await fetch('/options/set', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(options)
                });

                if (response.ok) {
                    showSuccess();
                } else {
                    alert('Failed to save options');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to save options');
            }
        }
    </script>
</body>
</html> 