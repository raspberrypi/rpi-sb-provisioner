<%inc
#include <string>
#include <vector>
#include <map>
#include <json/json.h>
%>

<%c++
auto scripts = @@.get<Json::Value>("scripts");
auto provisioner_stages = @@.get<std::map<std::string, std::vector<std::string>>>("provisioner_stages");
auto stage_descriptions = @@.get<std::map<std::string, std::string>>("stage_descriptions");
std::string currentPage = "customisation";
%>

<!DOCTYPE html>
<html>
<head>
    <title>Customisation Scripts</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <%view stylesheet %>
    <style>
        .container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 0 15px;
        }
        
        .mt-4 {
            margin-top: 1.5rem;
        }

/* Tab styling without relying on Bootstrap */
.tabs {
  margin-top: 20px;
}

.tab-buttons {
  display: flex;
  flex-wrap: wrap;
  border-bottom: 2px solid #ccc;
  margin-bottom: 20px;
}

.tab-button {
  background: #e0e0e0;
  border: 1px solid #ccc;
  border-bottom: none;
  border-top-left-radius: 5px;
  border-top-right-radius: 5px;
  padding: 10px 15px;
  margin-right: 5px;
  margin-bottom: 0;
  cursor: pointer;
  position: relative;
  top: 2px;
  color: #555;
  font-weight: 500;
  font-size: 16px;
}

.tab-button.active {
  background: #fff;
  border: 1px solid #ccc;
  border-bottom: 2px solid white;
  color: #222;
  font-weight: 600;
  z-index: 1;
}

.tab-button:hover:not(.active) {
  background: #eaeaea;
}

.tab-content {
  display: none;
}

.tab-content.active {
  display: block;
}

/* Scoped styles for customisation scripts page */
.hook-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  grid-gap: 20px;
  margin-top: 20px;
}

.hook-card {
  border: 1px solid #ddd;
  border-radius: 6px;
  padding: 15px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
  background-color: #fff;
  transition: box-shadow 0.2s ease-in-out;
}

.hook-card:hover {
  box-shadow: 0 4px 8px rgba(0,0,0,0.15);
}

.hook-card h4 {
  margin-top: 0;
  margin-bottom: 12px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 16px;
  color: #333;
}

.hook-status {
  display: inline-block;
  border-radius: 4px;
  padding: 3px 8px;
  font-size: 12px;
  font-weight: 600;
  margin-left: 10px;
}

.hook-enabled {
  background-color: #d4edda;
  color: #155724;
}

.hook-disabled {
  background-color: #f8d7da;
  color: #721c24;
}

.hook-missing {
  background-color: #e2e3e5;
  color: #41464b;
}

.hook-description {
  margin-bottom: 15px;
  font-size: 14px;
  line-height: 1.5;
  color: #555;
}

.hook-actions {
  display: flex;
  justify-content: space-between;
  margin-top: 15px;
}

/* Custom buttons without Bootstrap */
/* Button styles now centralized in stylesheet.csp */

.debug-info {
  display: none;
  margin-top: 20px;
  padding: 10px;
  background-color: #f8f9fa;
  border: 1px solid #ddd;
  border-radius: 5px;
}
    </style>
</head>
<body>
    <%view navbar %>
    
    <div class="container mt-4">
        <div class="customisation-container">
          <h1>Customisation Scripts</h1>
          <p>Create and manage scripts that run at different stages during provisioning.</p>
          
          <div class="tabs">
            <div class="tab-buttons">
              <%c++ for (const auto& [provisioner, stages] : provisioner_stages) { %>
                <button class="tab-button" onclick="openTab(event, '<%c++ $$ << provisioner; %>')" id="<%c++ $$ << provisioner; %>-tab">
                  <%c++ $$ << provisioner; %>
                </button>
              <%c++ } %>
            </div>
            
            <%c++ for (const auto& [provisioner, validStages] : provisioner_stages) { %>
              <div id="<%c++ $$ << provisioner; %>" class="tab-content">
                <h3><%c++ $$ << provisioner; %> scripts</h3>
                
                <div class="hook-grid">
                  <%c++ for (const auto& stage : validStages) { %>
                    <%c++ 
                      // Create the hook name without extension
                      std::string hookFilename = provisioner + "-" + stage;
                      bool hookExists = false;
                      bool hookEnabled = false;
                      std::string hookDescription = "";
                      
                      // Find this hook in the scripts data with .sh extension
                      for (int i = 0; i < scripts.size(); i++) {
                        std::string scriptName = scripts[i]["filename"].asString();
                        // Strip .sh extension if present for correct comparison
                        std::string baseScriptName = scriptName;
                        if (baseScriptName.length() > 3 && baseScriptName.substr(baseScriptName.length() - 3) == ".sh") {
                          baseScriptName = baseScriptName.substr(0, baseScriptName.length() - 3);
                        }
                        
                        // Log each script name for debugging
                        LOG_DEBUG << "Script name in data: " << scriptName << ", base name: " << baseScriptName << ", looking for: " << hookFilename;
                        
                        // Match by base name (no extension)
                        if (baseScriptName == hookFilename) {
                          hookExists = scripts[i].isMember("exists") ? scripts[i]["exists"].asBool() : true;
                          hookEnabled = scripts[i]["enabled"].asBool();
                          break;
                        }
                      }

                      // Get description from stage_descriptions
                      auto descIt = stage_descriptions.find(stage);
                      if (descIt != stage_descriptions.end()) {
                        hookDescription = descIt->second;
                      }
                    %>
                    
                    <div class="hook-card" data-filename="<%c++ $$ << hookFilename; %>">
                      <h4>
                        <%c++ $$ << stage; %>
                        <%c++ if (hookExists && hookEnabled) { %>
                          <span class="hook-status hook-enabled">Enabled</span>
                        <%c++ } else if (hookExists && !hookEnabled) { %>
                          <span class="hook-status hook-disabled">Disabled</span>
                        <%c++ } else { %>
                          <span class="hook-status hook-missing">Not Created</span>
                        <%c++ } %>
                      </h4>
                      
                      <div class="hook-description">
                        <%c++ $$ << hookDescription; %>
                      </div>
                      
                      <div class="hook-actions">
                        <%c++ if (hookExists) { %>
                          <a href="/customisation/get-script?script=<%c++ $$ << hookFilename; %>" class="cust-btn cust-btn-primary cust-btn-sm">Edit</a>
                          
                          <%c++ if (hookEnabled) { %>
                            <button onclick="disableScript('<%c++ $$ << hookFilename; %>')" class="cust-btn cust-btn-warning cust-btn-sm">Disable</button>
                          <%c++ } else { %>
                            <button onclick="enableScript('<%c++ $$ << hookFilename; %>')" class="cust-btn cust-btn-success cust-btn-sm">Enable</button>
                          <%c++ } %>
                          
                          <button onclick="deleteScript('<%c++ $$ << hookFilename; %>')" class="cust-btn cust-btn-danger cust-btn-sm">Delete</button>
                        <%c++ } else { %>
                          <a href="/customisation/create-script?script=<%c++ $$ << hookFilename; %>" class="cust-btn cust-btn-success cust-btn-sm">Create Script</a>
                        <%c++ } %>
                      </div>
                    </div>
                  <%c++ } %>
                </div>
              </div>
            <%c++ } %>
          </div>
          
          <!-- Hidden debug info (toggle with Ctrl+Shift+D) -->
          <div id="debugInfo" class="debug-info">
            <h4>Debug Information</h4>
            <pre id="scriptsData"></pre>
            <div id="fileCheckResults"></div>
          </div>
        </div>
    </div>

<script>
// Wrap all JavaScript in an IIFE to avoid global namespace pollution
(function() {
  // Debug helper - press Ctrl+Shift+D to show/hide debug info
  document.addEventListener('keydown', function(e) {
    if (e.ctrlKey && e.shiftKey && e.key === 'D') {
      var debugInfo = document.getElementById('debugInfo');
      debugInfo.style.display = debugInfo.style.display === 'none' ? 'block' : 'none';
    }
  });
  
  // Store the active tab name
  window.activeTab = '';
  
  // Helper function to get URL parameters
  function getUrlParameter(name) {
    name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
    var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
    var results = regex.exec(location.search);
    return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
  }
  
  // Populate debug data
  document.addEventListener('DOMContentLoaded', function() {
    var scriptsData = <%c++ $$ << scripts.toStyledString(); %>;
    document.getElementById('scriptsData').textContent = JSON.stringify(scriptsData, null, 2);
    
    // Add a section to verify script enabled states
    let checkResults = document.getElementById('fileCheckResults');
    checkResults.innerHTML = "<h5>Script State Verification</h5>";
    
    // For each script that exists, verify its enabled state
    scriptsData.forEach(script => {
      // Log script filename for debugging
      console.log("Script in data:", script.filename);
      
      // Strip .sh extension for matching UI elements
      let baseFilename = script.filename;
      if (baseFilename.endsWith('.sh')) {
        baseFilename = baseFilename.substring(0, baseFilename.length - 3);
      }
      console.log("Looking for UI element with base filename:", baseFilename);
      
      if (script.exists) {
        // Get the state shown in the UI
        let card = document.querySelector(`.hook-card[data-filename="${baseFilename}"]`);
        if (card) {
          let statusSpan = card.querySelector('.hook-status');
          let uiEnabled = false;
          if (statusSpan) {
            uiEnabled = statusSpan.classList.contains('hook-enabled');
          }
          
          // Verify UI matches data
          const stateMatch = uiEnabled === script.enabled;
          const stateColor = stateMatch ? 'green' : 'red';
          
          // Add verification result
          checkResults.innerHTML += `
            <div style="margin-bottom: 8px; border-bottom: 1px solid #eee; padding-bottom: 5px;">
              <div><strong>${script.filename}</strong></div>
              <div>Data shows: enabled=${script.enabled}, executable=${script.executable}</div>
              <div>UI shows: enabled=${uiEnabled}</div>
              <div style="color: ${stateColor}">Match: ${stateMatch ? 'Yes' : 'No'}</div>
            </div>
          `;
        }
      }
    });
    
    // Check if we have an activeTab parameter in the URL
    var tabFromUrl = getUrlParameter('activeTab');
    
    if (tabFromUrl) {
      console.log('Restoring active tab from URL parameter:', tabFromUrl);
      // Find the tab button for this tab
      var tabButton = document.getElementById(tabFromUrl + '-tab');
      if (tabButton) {
        // Click the tab button to activate it
        tabButton.click();
        return;
      }
    }
    
    // If no tab from URL or tab not found, activate the first tab by default
    var firstTabButton = document.querySelector('.tab-button');
    if (firstTabButton) {
      firstTabButton.click();
    }
  });
})();

function openTab(evt, tabName) {
  console.log("Opening tab: " + tabName);
  
  // Store active tab
  window.activeTab = tabName;
  
  // Hide all tab content
  var tabContents = document.querySelectorAll('.tab-content');
  for (var i = 0; i < tabContents.length; i++) {
    tabContents[i].classList.remove("active");
  }
  
  // Deactivate all tab buttons
  var tabButtons = document.querySelectorAll('.tab-button');
  for (var i = 0; i < tabButtons.length; i++) {
    tabButtons[i].classList.remove("active");
  }
  
  // Show the current tab and activate the button
  document.getElementById(tabName).classList.add("active");
  evt.currentTarget.classList.add("active");
}

// Update edit links to include activeTab parameter
document.addEventListener('DOMContentLoaded', function() {
  // After tabs have been set up, update all edit links
  const editLinks = document.querySelectorAll('a[href^="/customisation/get-script"]');
  editLinks.forEach(link => {
    link.addEventListener('click', function(e) {
      if (window.activeTab) {
        e.preventDefault();
        const currentHref = this.getAttribute('href');
        window.location.href = currentHref + (currentHref.includes('?') ? '&' : '?') + 
                              'activeTab=' + encodeURIComponent(window.activeTab);
      }
    });
  });
});

function getScriptBaseName(filename) {
  // No need to extract the base name as we're already using it without extension
  return filename;
}

function disableScript(filename) {
  console.log(`Attempting to disable script: ${filename}`);
  
  // Show loading state
  const card = document.querySelector(`.hook-card[data-filename="${filename}"]`);
  if (!card) {
    console.error(`Could not find card for script: ${filename}`);
    return;
  }
  
  const statusSpan = card.querySelector('.hook-status');
  const disableButton = card.querySelector('button.cust-btn-warning');
  
  if (disableButton) {
    console.log('Found disable button, setting to loading state');
    disableButton.textContent = 'Disabling...';
    disableButton.disabled = true;
  } else {
    console.warn('Could not find disable button');
  }
  
  // Use the script name directly, server will append .sh
  const baseScriptName = filename;
  console.log(`Using script base name: ${baseScriptName}`);
  
  // Use GET method since that's what the server expects
  fetch('/customisation/disable-script?script=' + encodeURIComponent(baseScriptName), {
    method: 'GET'
  })
  .then(response => {
    console.log(`Disable script response status: ${response.status}`);
    return response.text().then(text => {
      console.log(`Response body: ${text}`);
      try {
        return { ok: response.ok, text: text, json: JSON.parse(text) };
      } catch(e) {
        return { ok: response.ok, text: text };
      }
    });
  })
  .then(result => {
    console.log(`Response OK: ${result.ok}`);
    if (result.json) {
      console.log('Response JSON:', result.json);
    }
    
    if (result.ok) {
      console.log('Script disabled successfully, updating UI');
      
      // Update the status span
      if (statusSpan) {
        statusSpan.className = 'hook-status hook-disabled';
        statusSpan.textContent = 'Disabled';
      }
      
      // Create new button
      const enableButton = document.createElement('button');
      enableButton.className = 'cust-btn cust-btn-success cust-btn-sm';
      enableButton.textContent = 'Enable';
      enableButton.onclick = function() { enableScript(filename); };
      
      // Find and replace the disable button
      if (disableButton && disableButton.parentNode) {
        disableButton.parentNode.replaceChild(enableButton, disableButton);
      } else {
        console.warn('Could not replace disable button with enable button');
        
        // Fallback: Update the entire actions div
        const actionsDiv = card.querySelector('.hook-actions');
        if (actionsDiv) {
          const editButton = actionsDiv.querySelector('a.cust-btn-primary');
          const deleteButton = actionsDiv.querySelector('button.cust-btn-danger');
          
          // Clear actions div
          actionsDiv.innerHTML = '';
          
          // Add back the edit button
          if (editButton) actionsDiv.appendChild(editButton.cloneNode(true));
          
          // Add the new enable button
          actionsDiv.appendChild(enableButton);
          
          // Add back the delete button
          if (deleteButton) actionsDiv.appendChild(deleteButton.cloneNode(true));
        }
      }
    } else {
      const errorMsg = result.json ? 
        (result.json.error || 'Unknown error') : 
        (result.text || 'Unknown error');
      
      console.error(`Failed to disable script: ${errorMsg}`);
      alert('Failed to disable script: ' + errorMsg);
      
      // Reset button state
      if (disableButton) {
        disableButton.textContent = 'Disable';
        disableButton.disabled = false;
      }
    }
  })
  .catch(error => {
    console.error('Error disabling script:', error);
    alert('Error disabling script: ' + error.message);
    
    // Reset button state
    if (disableButton) {
      disableButton.textContent = 'Disable';
      disableButton.disabled = false;
    }
  });
}

function enableScript(filename) {
  console.log(`Attempting to enable script: ${filename}`);
  
  // Show loading state
  const card = document.querySelector(`.hook-card[data-filename="${filename}"]`);
  if (!card) {
    console.error(`Could not find card for script: ${filename}`);
    return;
  }
  
  const statusSpan = card.querySelector('.hook-status');
  const enableButton = card.querySelector('button.cust-btn-success');
  
  if (enableButton) {
    console.log('Found enable button, setting to loading state');
    enableButton.textContent = 'Enabling...';
    enableButton.disabled = true;
  } else {
    console.warn('Could not find enable button');
  }
  
  // Use the script name directly, server will append .sh
  const baseScriptName = filename;
  console.log(`Using script base name: ${baseScriptName}`);
  
  // Use GET method since that's what the server expects
  fetch('/customisation/enable-script?script=' + encodeURIComponent(baseScriptName), {
    method: 'GET'
  })
  .then(response => {
    console.log(`Enable script response status: ${response.status}`);
    return response.text().then(text => {
      console.log(`Response body: ${text}`);
      try {
        return { ok: response.ok, text: text, json: JSON.parse(text) };
      } catch(e) {
        return { ok: response.ok, text: text };
      }
    });
  })
  .then(result => {
    console.log(`Response OK: ${result.ok}`);
    if (result.json) {
      console.log('Response JSON:', result.json);
    }
    
    if (result.ok) {
      console.log('Script enabled successfully, updating UI');
      
      // Update the status span
      if (statusSpan) {
        statusSpan.className = 'hook-status hook-enabled';
        statusSpan.textContent = 'Enabled';
      }
      
      // Create new button
      const disableButton = document.createElement('button');
      disableButton.className = 'cust-btn cust-btn-warning cust-btn-sm';
      disableButton.textContent = 'Disable';
      disableButton.onclick = function() { disableScript(filename); };
      
      // Find and replace the enable button
      if (enableButton && enableButton.parentNode) {
        enableButton.parentNode.replaceChild(disableButton, enableButton);
      } else {
        console.warn('Could not replace enable button with disable button');
        
        // Fallback: Update the entire actions div
        const actionsDiv = card.querySelector('.hook-actions');
        if (actionsDiv) {
          const editButton = actionsDiv.querySelector('a.cust-btn-primary');
          const deleteButton = actionsDiv.querySelector('button.cust-btn-danger');
          
          // Clear actions div
          actionsDiv.innerHTML = '';
          
          // Add back the edit button
          if (editButton) actionsDiv.appendChild(editButton.cloneNode(true));
          
          // Add the new disable button
          actionsDiv.appendChild(disableButton);
          
          // Add back the delete button
          if (deleteButton) actionsDiv.appendChild(deleteButton.cloneNode(true));
        }
      }
    } else {
      const errorMsg = result.json ? 
        (result.json.error || 'Unknown error') : 
        (result.text || 'Unknown error');
      
      console.error(`Failed to enable script: ${errorMsg}`);
      alert('Failed to enable script: ' + errorMsg);
      
      // Reset button state
      if (enableButton) {
        enableButton.textContent = 'Enable';
        enableButton.disabled = false;
      }
    }
  })
  .catch(error => {
    console.error('Error enabling script:', error);
    alert('Error enabling script: ' + error.message);
    
    // Reset button state
    if (enableButton) {
      enableButton.textContent = 'Enable';
      enableButton.disabled = false;
    }
  });
}

function deleteScript(filename) {
  if (confirm('Are you sure you want to delete this script?')) {
    console.log(`Attempting to delete script: ${filename}`);
    
    // Get the card element for this script
    const card = document.querySelector(`.hook-card[data-filename="${filename}"]`);
    if (!card) {
      console.error(`Could not find card for script: ${filename}`);
      return;
    }
    
    // Use the script name directly, server will append .sh
    const baseScriptName = filename;
    console.log(`Using script base name: ${baseScriptName}`);
    
    fetch('/customisation/delete-script?script=' + encodeURIComponent(baseScriptName), {
      method: 'GET'
    })
    .then(response => {
      console.log(`Delete script response status: ${response.status}`);
      return response.text().then(text => {
        console.log(`Response body: ${text}`);
        try {
          return { ok: response.ok, text: text, json: JSON.parse(text) };
        } catch(e) {
          return { ok: response.ok, text: text };
        }
      });
    })
    .then(result => {
      console.log(`Response OK: ${result.ok}`);
      if (result.json) {
        console.log('Response JSON:', result.json);
      }
      
      if (result.ok) {
        console.log('Script deleted successfully, updating UI');
        
        // Update the card to show "Not Created" state
        // Update status label
        const statusSpan = card.querySelector('.hook-status');
        if (statusSpan) {
          statusSpan.className = 'hook-status hook-missing';
          statusSpan.textContent = 'Not Created';
        }
        
        // Update actions div
        const actionsDiv = card.querySelector('.hook-actions');
        if (actionsDiv) {
          // Replace with a single "Create Script" button
          actionsDiv.innerHTML = `
            <a href="/customisation/create-script?script=${encodeURIComponent(filename)}" class="cust-btn cust-btn-success cust-btn-sm">Create Script</a>
          `;
        }
      } else {
        const errorMsg = result.json ? 
          (result.json.error || 'Unknown error') : 
          (result.text || 'Unknown error');
        
        console.error(`Failed to delete script: ${errorMsg}`);
        alert('Failed to delete script: ' + errorMsg);
      }
    })
    .catch(error => {
      console.error('Error deleting script:', error);
      alert('Error deleting script: ' + error.message);
    });
  }
}
</script>
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
</body>
</html>