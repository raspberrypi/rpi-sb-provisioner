<!DOCTYPE html>
<html>
<head>
    <title>System Images</title>
    <%view stylesheet %>
    <script>
        // WebSocket connection
        let ws = null;
        let pendingSha256Requests = new Set();
        // For polling SHA256 calculations
        let pollingIntervals = {};
        const POLLING_INTERVAL = 1000; // Poll every 1 second for better UI responsiveness

        function showMessage(message, isError = false) {
            const messageDiv = document.getElementById(isError ? 'error-message' : 'success-message');
            messageDiv.textContent = message;
            messageDiv.style.display = 'block';
            setTimeout(() => {
                messageDiv.style.display = 'none';
            }, 3000);
        }

        async function useImage(name) {
            if (!confirm('Are you sure you want to use this image as the gold master?')) {
                return;
            }

            try {
                // Set the new gold master image
                const response = await fetch('/options/set', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        "GOLD_MASTER_OS_FILE": "/srv/rpi-sb-provisioner/images/" + name
                    })
                });

                if (response.ok) {
                    // Clear the workdir contents by calling the clear-workdir endpoint
                    // The endpoint will determine the workdir path from the config
                    const clearResponse = await fetch('/options/clear-workdir', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });
                    
                    if (!clearResponse.ok) {
                        showMessage('Gold master image updated but failed to clear work directory', true);
                        return;
                    }
                    
                    showMessage('Gold master image updated successfully');
                    location.reload();
                } else {
                    showMessage('Failed to update gold master image', true);
                }
            } catch (error) {
                console.error('Error:', error);
                showMessage('Failed to update gold master image', true);
            }
        }

        async function clearCaches() {
            if (!confirm('Are you sure you want to clear the cached files for this image?')) {
                return;
            }

            try {
                // Call the clear-workdir endpoint to clear the cache
                const clearResponse = await fetch('/options/clear-workdir', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });
                
                if (clearResponse.ok) {
                    showMessage('Cache files cleared successfully');
                } else {
                    showMessage('Failed to clear cache files', true);
                }
            } catch (error) {
                console.error('Error:', error);
                showMessage('Failed to clear cache files', true);
            }
        }

        async function deleteImage(name) {
            if (!confirm('Are you sure you want to delete this image?')) {
                return;
            }

            try {
                // Stop any ongoing SHA256 calculation for this image
                pendingSha256Requests.delete(name);
                stopPolling(name);
                
                const response = await fetch(`/delete-image?name=${encodeURIComponent(name)}`, {
                    method: 'POST'
                });

                if (response.ok) {
                    showMessage('Image deleted successfully');
                    location.reload();
                } else {
                    showMessage('Failed to delete image', true);
                }
            } catch (error) {
                console.error('Error:', error);
                showMessage('Failed to delete image', true);
            }
        }
        
        // Initialize WebSocket connection
        function initWebSocket() {
            // Check if WebSockets are supported
            if (!window.WebSocket) {
                console.error('WebSockets not supported');
                // Fallback to polling for all images
                initializePolling();
                return;
            }
            
            // Close existing connection if any
            if (ws) {
                try {
                    ws.close();
                } catch (e) {
                    console.error('Error closing existing WebSocket:', e);
                }
            }
            
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${window.location.host}/ws/sha256`;
            
            try {
                console.log('Connecting to WebSocket:', wsUrl);
                ws = new WebSocket(wsUrl);
                
                ws.onopen = function() {
                    console.log('WebSocket connection established');
                    // Re-send requests for all pending SHA256 calculations
                    initializeSha256Requests();
                    // Stop any polling that might have been started
                    stopAllPolling();
                };
                
                ws.onmessage = function(event) {
                    try {
                        const response = JSON.parse(event.data);
                        console.log('WebSocket message received:', response);
                        if (response.image_name) {
                            // Handle the SHA256 update
                            updateSha256Cell(response);
                            
                            // For completed calculations, we can remove from pending
                            if (response.status === 'complete' || response.status === 'error') {
                                pendingSha256Requests.delete(response.image_name);
                            }
                        }
                    } catch (e) {
                        console.error('Error parsing WebSocket message:', e);
                    }
                };
                
                ws.onerror = function(error) {
                    console.error('WebSocket error:', error);
                    // Clear the WebSocket reference on error to prevent stalling
                    ws = null;
                    // Fallback to polling
                    initializePolling();
                };
                
                ws.onclose = function(event) {
                    console.log(`WebSocket connection closed: code=${event.code}, reason=${event.reason}`);
                    // Clear the WebSocket reference when closed
                    ws = null;
                    
                    // Fallback to polling while attempting to reconnect
                    initializePolling();
                    
                    // Try to reconnect after a delay (using exponential backoff)
                    const maxReconnectDelay = 30000; // 30 seconds max
                    const baseDelay = 1000; // 1 second base
                    const reconnectAttempts = window.reconnectAttempts || 0;
                    window.reconnectAttempts = reconnectAttempts + 1;
                    
                    const delay = Math.min(
                        Math.pow(1.5, reconnectAttempts) * baseDelay, 
                        maxReconnectDelay
                    );
                    
                    console.log(`Will attempt to reconnect in ${delay/1000} seconds (attempt #${reconnectAttempts+1})`);
                    
                    setTimeout(() => {
                        if (document.visibilityState !== 'hidden') {
                            initWebSocket();
                        } else {
                            // If page is hidden, wait for it to become visible
                            const visibilityHandler = () => {
                                if (document.visibilityState === 'visible') {
                                    document.removeEventListener('visibilitychange', visibilityHandler);
                                    initWebSocket();
                                }
                            };
                            document.addEventListener('visibilitychange', visibilityHandler);
                        }
                    }, delay);
                };
            } catch (e) {
                console.error('Error creating WebSocket:', e);
                // Fallback to polling
                initializePolling();
            }
        }
        
        // Update SHA256 cell with response data
        function updateSha256Cell(response) {
            const sha256Cell = document.querySelector(`.sha256-cell[data-image="${response.image_name}"]`);
            if (!sha256Cell) {
                console.warn(`No SHA256 cell found for image: ${response.image_name}`);
                return;
            }
            
            if (response.status === 'complete') {
                console.log(`SHA256 calculation complete for ${response.image_name}: ${response.sha256}`);
                displayTruncatedHash(sha256Cell, response.sha256);
                pendingSha256Requests.delete(response.image_name);
                // Stop polling for this image if it was being polled
                stopPolling(response.image_name);
                
                // Remove progress bar if it exists
                const progressContainer = sha256Cell.querySelector('.hash-progress-container');
                if (progressContainer) {
                    progressContainer.remove();
                }
            } else if (response.status === 'error') {
                console.log(`SHA256 calculation error for ${response.image_name}: ${response.error || 'Unknown error'}`);
                
                // Check if it was cancelled (file deleted)
                if (response.error && response.error.includes('calculation-cancelled')) {
                    console.log(`SHA256 calculation was cancelled for ${response.image_name} (file deleted)`);
                    // Don't display error, just clean up
                } else {
                    displayTruncatedHash(sha256Cell, response.error || 'Unknown error');
                }
                
                pendingSha256Requests.delete(response.image_name);
                // Stop polling for this image if it was being polled
                stopPolling(response.image_name);
                
                // Remove progress bar if it exists
                const progressContainer = sha256Cell.querySelector('.hash-progress-container');
                if (progressContainer) {
                    progressContainer.remove();
                }
            } else if (response.status === 'pending') {
                // Show progress if available
                if (response.progress !== undefined || response.progress_percent !== undefined) {
                    const progressPercent = response.progress_percent !== undefined ? 
                        response.progress_percent : 
                        Math.round(response.progress * 100);
                    
                    console.log(`SHA256 progress update for ${response.image_name}: ${progressPercent}%`);
                    displayTruncatedHash(sha256Cell, `Calculating... ${progressPercent}%`);
                    
                    // Create/update progress bar if not exists
                    let progressContainer = sha256Cell.querySelector('.hash-progress-container');
                    if (!progressContainer) {
                        // Create progress bar structure
                        progressContainer = document.createElement('div');
                        progressContainer.className = 'hash-progress-container';
                        
                        const progressBar = document.createElement('div');
                        progressBar.className = 'hash-progress-bar';
                        
                        const progressFill = document.createElement('div');
                        progressFill.className = 'hash-progress-fill';
                        
                        progressBar.appendChild(progressFill);
                        progressContainer.appendChild(progressBar);
                        sha256Cell.appendChild(progressContainer);
                    }
                    
                    // Update progress fill
                    const progressFill = sha256Cell.querySelector('.hash-progress-fill');
                    if (progressFill) {
                        progressFill.style.width = `${progressPercent}%`;
                    }
                } else if (sha256Cell.textContent === 'use-websocket' || 
                           sha256Cell.textContent === 'Connecting...') {
                    displayTruncatedHash(sha256Cell, 'Calculating...');
                }
            }
        }
        
        // Show notification when hash is copied
        function showCopyNotification(message) {
            // Create notification element if it doesn't exist
            let notification = document.getElementById('copy-notification');
            if (!notification) {
                notification = document.createElement('div');
                notification.id = 'copy-notification';
                document.body.appendChild(notification);
            }
            
            // Set message and show
            notification.textContent = message;
            notification.classList.add('show');
            
            // Hide after 2 seconds
            setTimeout(() => {
                notification.classList.remove('show');
            }, 2000);
        }
        
        // Display truncated hash with tooltip and copy functionality
        function displayTruncatedHash(cell, fullHash) {
            // Don't process non-hash values
            if (!fullHash || fullHash.length < 10 || 
                fullHash === 'use-websocket' || 
                fullHash.includes('Calculating') || 
                fullHash.includes('Error')) {
                cell.textContent = fullHash;
                return;
            }
            
            // Clear previous content
            cell.innerHTML = '';
            
            // Create truncated hash element
            const truncatedHash = document.createElement('span');
            truncatedHash.className = 'truncated-hash';
            truncatedHash.textContent = fullHash.substring(0, 10) + '...';
            truncatedHash.title = fullHash;
            truncatedHash.setAttribute('data-full-hash', fullHash);
            
            // Add click handler for copy
            truncatedHash.addEventListener('click', async () => {
                try {
                    await navigator.clipboard.writeText(fullHash);
                    showCopyNotification('SHA256 hash copied to clipboard');
                } catch (err) {
                    console.error('Failed to copy hash:', err);
                    showCopyNotification('Failed to copy hash');
                }
            });
            
            cell.appendChild(truncatedHash);
        }

        // Start polling for SHA256 calculation result
        function startPolling(imageName) {
            if (pollingIntervals[imageName]) {
                // Already polling
                return;
            }
            
            pollingIntervals[imageName] = setInterval(() => {
                fetchSha256(imageName);
            }, POLLING_INTERVAL);
            
            // Immediately fetch once
            fetchSha256(imageName);
        }
        
        // Stop polling for a specific image
        function stopPolling(imageName) {
            if (pollingIntervals[imageName]) {
                clearInterval(pollingIntervals[imageName]);
                delete pollingIntervals[imageName];
            }
        }
        
        // Stop all polling intervals
        function stopAllPolling() {
            Object.keys(pollingIntervals).forEach(imageName => {
                clearInterval(pollingIntervals[imageName]);
                delete pollingIntervals[imageName];
            });
        }
        
        // Fetch SHA256 calculation result
        async function fetchSha256(imageName) {
            try {
                // Then fetch the actual SHA256 status
                const response = await fetch(`/get-image-sha256?name=${encodeURIComponent(imageName)}`);
                if (response.ok) {
                    const data = await response.json();
                    console.log(`SHA256 status for ${imageName}:`, data);
                    
                    // If we have a completed hash, update the cell with the final value
                    if (data.sha256 && data.sha256 !== 'use-websocket') {
                        console.log(`Got complete SHA256 for ${imageName}: ${data.sha256}`);
                        updateSha256Cell({
                            image_name: imageName,
                            sha256: data.sha256,
                            status: data.status || 'complete'
                        });
                        return;
                    }
                    
                    // Handle progress information
                    if (data.progress !== undefined) {
                        const progressPercent = data.progress_percent || Math.round(data.progress * 100);
                        console.log(`Got progress update for ${imageName}: ${progressPercent}%`);
                        updateSha256Cell({
                            image_name: imageName,
                            status: 'pending',
                            progress_percent: progressPercent
                        });
                        return;
                    }
                    
                    // If it's still calculating but no progress info
                    if (data.sha256 === 'use-websocket') {
                        // Get metadata for estimation
                        try {
                            const metadataResponse = await fetch(`/get-image-metadata?name=${encodeURIComponent(imageName)}`);
                            if (metadataResponse.ok) {
                                const metadata = await metadataResponse.json();
                                let estimatedTimeMsg = '';
                                
                                if (metadata.size_mb) {
                                    const fileSizeMB = metadata.size_mb;
                                    // Estimate based on 40MB/sec processing speed
                                    const estimatedMinutes = Math.max(1, Math.ceil(fileSizeMB / 40));
                                    
                                    if (estimatedMinutes < 2) {
                                        estimatedTimeMsg = '(should complete shortly)';
                                    } else if (estimatedMinutes < 5) {
                                        estimatedTimeMsg = `(est. ${estimatedMinutes} minutes)`;
                                    } else {
                                        estimatedTimeMsg = `(est. ${estimatedMinutes} minutes for ${Math.round(fileSizeMB)} MB)`;
                                    }
                                }
                                
                                // If we're getting 'use-websocket', display informative calculating message
                                const cell = document.querySelector(`.sha256-cell[data-image="${imageName}"]`);
                                if (cell) {
                                    const currentText = cell.textContent;
                                    // Only update if not already showing a calculation message
                                    // or if it's the first calculation message
                                    if (currentText === 'use-websocket' || 
                                        currentText === 'Connecting...' ||
                                        !currentText.includes('Calculating')) {
                                        console.log(`Setting calculation message for ${imageName}`);
                                        displayTruncatedHash(cell, `Calculating... ${estimatedTimeMsg}`);
                                    }
                                }
                            }
                        } catch (e) {
                            console.error('Error getting metadata:', e);
                        }
                    }
                }
            } catch (error) {
                console.error('Error fetching SHA256:', error);
            }
        }
        
        // Initialize polling for all SHA256 cells that need it
        function initializePolling() {
            const sha256Cells = document.querySelectorAll('.sha256-cell');
            sha256Cells.forEach(cell => {
                const imageName = cell.dataset.image;
                if (cell.textContent === 'use-websocket' || 
                    cell.textContent === 'Connecting...' ||
                    cell.textContent === 'Calculating...') {
                    cell.textContent = 'Calculating...';
                    startPolling(imageName);
                }
            });
        }
        
        // Send SHA256 calculation request via WebSocket
        function requestSha256(imageName) {
            if (!ws || ws.readyState !== WebSocket.OPEN) {
                // If WebSocket not ready, use polling instead
                startPolling(imageName);
                return;
            }
            
            pendingSha256Requests.add(imageName);
            ws.send(JSON.stringify({
                action: 'get_sha256',
                image_name: imageName
            }));
        }
        
        // Initialize SHA256 requests for all images
        function initializeSha256Requests() {
            if (!ws || ws.readyState !== WebSocket.OPEN) {
                console.warn('WebSocket not connected, falling back to polling');
                initializePolling();
                return;
            }
            
            // Reset reconnect attempts on successful connection
            window.reconnectAttempts = 0;
            
            const sha256Cells = document.querySelectorAll('.sha256-cell');
            console.log(`Found ${sha256Cells.length} SHA256 cells to initialize`);
            
            sha256Cells.forEach(cell => {
                const imageName = cell.dataset.image;
                const currentText = cell.textContent;
                
                // Request SHA256 for cells that need calculation
                if (currentText === 'use-websocket' || 
                    currentText === 'Connecting...' || 
                    currentText === 'Calculating...' ||
                    currentText.includes('Calculating')) {
                    
                    console.log(`Requesting SHA256 for ${imageName}`);
                    cell.textContent = 'Calculating...';
                    requestSha256(imageName);
                }
            });
        }

        // Initialize truncated hash display for all existing hashes
        function initializeTruncatedHashes() {
            const sha256Cells = document.querySelectorAll('.sha256-cell');
            sha256Cells.forEach(cell => {
                const hash = cell.textContent;
                // Only process cells with actual hash values (not calculating or error messages)
                if (hash && hash.length > 10 && 
                    !hash.includes('use-websocket') && 
                    !hash.includes('Calculating') && 
                    !hash.includes('Error')) {
                    displayTruncatedHash(cell, hash);
                }
            });
        }

        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize truncated hashes for existing values
            initializeTruncatedHashes();
            // Force polling to start immediately, before WebSocket setup
            initializePolling();
            // Then try to establish WebSocket
            initWebSocket();
        });

        // Force close WebSocket with timeout
        function forceCloseWebSocket() {
            if (ws) {
                console.log('Force closing WebSocket connection');
                try {
                    // Set a very short timeout to force immediate termination
                    const closeTimeout = setTimeout(() => {
                        console.log('WebSocket close timeout reached, forcing termination');
                        ws = null; // Clear reference immediately
                    }, 50); // Very short timeout (50ms)
                    
                    // Try to close gracefully
                    ws.close();
                    
                    // Clear timeout if close was successful
                    if (ws && ws.readyState === WebSocket.CLOSED) {
                        clearTimeout(closeTimeout);
                    }
                    
                    // Also force close after a very short delay regardless
                    setTimeout(() => {
                        if (ws) {
                            console.log('Force terminating WebSocket reference');
                            ws = null;
                        }
                    }, 100);
                } catch (e) {
                    console.error('Error closing WebSocket:', e);
                    ws = null; // Clear reference even on error
                }
            }
        }
        
        // Cleanup when navigating away
        window.addEventListener('beforeunload', () => {
            console.log('Page unloading - cleaning up WebSocket and polling');
            // Clear all pending requests first
            pendingSha256Requests.clear();
            // Stop all polling
            stopAllPolling();
            // Force close WebSocket with timeout
            forceCloseWebSocket();
        });
        
        // Also cleanup on page hide (covers more navigation scenarios)
        window.addEventListener('pagehide', () => {
            console.log('Page hidden - cleaning up WebSocket and polling');
            // Clear all pending requests first
            pendingSha256Requests.clear();
            // Stop all polling
            stopAllPolling();
            // Force close WebSocket with timeout
            forceCloseWebSocket();
        });
    </script>
</head>
<body>
    <%view navbar %>

    <h1>System Images</h1>

    <div id="success-message" class="success-message"></div>
    <div id="error-message" class="error-message"></div>

    <div class="upload-section">
        <h2>Upload New Image</h2>
        <form class="upload-form" id="uploadForm" enctype="multipart/form-data">
            <div class="upload-row">
                <input type="file" name="image" required>
                <div class="progress-container" style="display: none;">
                    <div class="progress-bar">
                        <div class="progress-fill"></div>
                    </div>
                    <div class="progress-text">0%</div>
                </div>
                <button type="submit" id="uploadButton">Upload</button>
                <button type="button" id="cancelButton" style="display: none;">Cancel</button>
            </div>
        </form>
    </div>

    <table class="image-list">
        <thead>
            <tr>
                <th>Image Name</th>
                <th>SHA256</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <%c++
            auto images = @@.get<std::vector<std::map<std::string, std::string>>>("images");
            for(const auto& image : images) {
            %>
                <tr class="<%c++ $$ << (image.at("is_gold_master") == "true" ? "gold-master" : ""); %>">
                    <td><%c++ $$ << image.at("name"); %></td>
                    <td class="sha256-cell" data-image="<%c++ $$ << image.at("name"); %>"><%c++ $$ << image.at("sha256"); %></td>
                    <td><%c++ $$ << (image.at("is_gold_master") == "true" ? "Current Gold Master" : ""); %></td>
                    <td>
                        <%c++ if (image.at("is_gold_master") == "true") { %>
                            <button class="clear-cache-btn" onclick="clearCaches()">Clear Caches</button>
                        <%c++ } else { %>
                            <button class="use-btn" onclick="useImage('<%c++ $$ << image.at("name"); %>')">Use</button>
                        <%c++ } %>
                        <button class="delete-btn" onclick="deleteImage('<%c++ $$ << image.at("name"); %>')">Delete</button>
                    </td>
                </tr>
            <%c++ } %>
        </tbody>
    </table>

    <style>
        .gold-master {
            background-color: #e6ffe6;
        }
        .use-btn, .delete-btn, .clear-cache-btn {
            min-width: 80px;
            padding: 8px 16px;
            margin-right: 5px;
            cursor: pointer;
            border-radius: 3px;
            font-size: 14px;
            font-weight: 500;
        }
        .use-btn {
            background-color: #4CAF50;
            color: white;
            border: none;
        }
        .use-btn:hover {
            background-color: #45a049;
        }
        .clear-cache-btn {
            background-color: #2196F3;
            color: white;
            border: none;
        }
        .clear-cache-btn:hover {
            background-color: #0b7dda;
        }
        .delete-btn {
            background-color: #f44336;
            color: white;
            border: none;
        }
        .delete-btn:hover {
            background-color: #da190b;
        }
        .upload-form {
            width: 100%;
        }
        .upload-row {
            display: flex;
            align-items: center;
            gap: 15px;
            flex-wrap: wrap;
        }
        .progress-container {
            flex: 1;
            min-width: 200px;
            max-width: 300px;
        }
        .progress-bar {
            width: 100%;
            height: 20px;
            background-color: #f0f0f0;
            border-radius: 10px;
            overflow: hidden;
        }
        .progress-fill {
            width: 0%;
            height: 100%;
            background-color: #4CAF50;
            transition: width 0.1s ease-out;
        }
        .progress-text {
            text-align: center;
            margin-top: 5px;
            font-size: 14px;
            color: #666;
            min-height: 1.2em; /* Prevent layout shift when text changes */
        }
        #uploadButton, #cancelButton {
            min-width: 80px;
            padding: 8px 16px;
            cursor: pointer;
            border-radius: 3px;
            font-size: 14px;
            font-weight: 500;
            border: none;
        }
        #uploadButton {
            background-color: #4CAF50;
            color: white;
        }
        #uploadButton:hover {
            background-color: #45a049;
        }
        #cancelButton {
            background-color: #f44336;
            color: white;
        }
        #cancelButton:hover {
            background-color: #da190b;
        }
        
        /* SHA256 hash progress bar styles */
        .hash-progress-container {
            margin-top: 5px;
            width: 100%;
        }
        .hash-progress-bar {
            width: 100%;
            height: 10px;
            background-color: #f0f0f0;
            border-radius: 5px;
            overflow: hidden;
        }
        .hash-progress-fill {
            width: 0%;
            height: 100%;
            background-color: #4CAF50;
            transition: width 0.1s ease-out;
        }
        .sha256-cell {
            position: relative;
            min-height: 20px;
        }
        
        /* Truncated hash styles */
        .truncated-hash {
            cursor: pointer;
            color: #0066cc;
            position: relative;
        }
        
        .truncated-hash:hover {
            text-decoration: underline;
        }
        
        /* Copy notification */
        #copy-notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: #333;
            color: white;
            padding: 10px 20px;
            border-radius: 4px;
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
            z-index: 1000;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        }
        
        #copy-notification.show {
            opacity: 1;
        }
    </style>

    <script>
        // Handle image upload with progress
        document.addEventListener('DOMContentLoaded', () => {
            const form = document.getElementById('uploadForm');
            const uploadButton = document.getElementById('uploadButton');
            const cancelButton = document.getElementById('cancelButton');
            const progressContainer = document.querySelector('.progress-container');
            const progressFill = document.querySelector('.progress-fill');
            const progressText = document.querySelector('.progress-text');
            let controller;

            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const fileInput = form.querySelector('input[type="file"]');
                if (!fileInput.files.length) {
                    showMessage('Please select a file to upload', true);
                    return;
                }
                
                const file = fileInput.files[0];
                const formData = new FormData();
                formData.append('image', file);
                
                // Show progress UI
                uploadButton.style.display = 'none';
                cancelButton.style.display = 'inline-block';
                progressContainer.style.display = 'block';
                progressFill.style.width = '0%';
                progressText.textContent = 'Starting upload...';
                
                controller = new AbortController();
                
                try {
                    const response = await new Promise((resolve, reject) => {
                        const xhr = new XMLHttpRequest();
                        
                        // Track upload progress
                        xhr.upload.addEventListener('progress', (e) => {
                            if (e.lengthComputable) {
                                // Scale upload progress to 0-90% range
                                const uploadPercent = (e.loaded / e.total) * 100;
                                const scaledPercent = (uploadPercent * 90) / 100;
                                
                                progressFill.style.width = scaledPercent + '%';
                                progressText.textContent = Math.round(scaledPercent) + '%';
                            }
                        });
                        
                        // Handle upload start
                        xhr.upload.addEventListener('loadstart', () => {
                            progressText.textContent = '0%';
                        });
                        
                        // Handle upload completion (data sent to server)
                        xhr.upload.addEventListener('load', () => {
                            // Upload transmission complete, but server still processing
                            progressFill.style.width = '90%';
                            progressText.textContent = 'Server processing...';
                        });
                        
                        // Handle complete response from server
                        xhr.addEventListener('load', () => {
                            // Server finished processing
                            progressFill.style.width = '100%';
                            progressText.textContent = 'Complete!';
                            
                            if (xhr.status >= 200 && xhr.status < 300) {
                                resolve({
                                    ok: true,
                                    status: xhr.status,
                                    json: () => Promise.resolve(JSON.parse(xhr.responseText))
                                });
                            } else {
                                resolve({
                                    ok: false,
                                    status: xhr.status,
                                    json: () => Promise.resolve(JSON.parse(xhr.responseText))
                                });
                            }
                        });
                        
                        // Handle errors
                        xhr.addEventListener('error', () => {
                            reject(new Error('Upload failed'));
                        });
                        
                        // Handle abort
                        xhr.addEventListener('abort', () => {
                            reject(new Error('Upload cancelled'));
                        });
                        
                        // Set up abort signal
                        controller.signal.addEventListener('abort', () => {
                            xhr.abort();
                        });
                        
                        // Start the upload
                        xhr.open('POST', '/upload-image');
                        xhr.send(formData);
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        
                        // Small delay to show "Complete!" status
                        await new Promise(resolve => setTimeout(resolve, 500));
                        
                        // Show appropriate message based on whether file was renamed
                        if (data.renamed) {
                            showMessage(`File uploaded as "${data.filename}" (original name "${data.original_filename}" already existed)`);
                        } else {
                            showMessage('Image uploaded successfully');
                        }
                        
                        // Add the uploaded image to the table
                        const tbody = document.querySelector('.image-list tbody');
                        const newRow = document.createElement('tr');
                        
                        newRow.innerHTML = `
                            <td>${data.filename}</td>
                            <td class="sha256-cell" data-image="${data.filename}">Connecting...</td>
                            <td></td>
                            <td>
                                <button class="use-btn" onclick="useImage('${data.filename}')">Use</button>
                                <button class="delete-btn" onclick="deleteImage('${data.filename}')">Delete</button>
                            </td>
                        `;
                        
                        tbody.appendChild(newRow);
                        
                        // Request SHA256 for the new image
                        requestSha256(data.filename);
                    } else {
                        const errorData = await response.json();
                        showMessage(`Upload failed: ${errorData.message || 'Unknown error'}`, true);
                    }
                } catch (error) {
                    if (error.message !== 'Upload cancelled') {
                        showMessage(`Upload failed: ${error.message}`, true);
                    }
                } finally {
                    // Reset the form
                    form.reset();
                    uploadButton.style.display = 'inline-block';
                    cancelButton.style.display = 'none';
                    progressContainer.style.display = 'none';
                    controller = null;
                }
            });
            
            cancelButton.addEventListener('click', () => {
                if (controller) {
                    controller.abort();
                    controller = null;
                    
                    // Reset the form
                    form.reset();
                    uploadButton.style.display = 'inline-block';
                    cancelButton.style.display = 'none';
                    progressContainer.style.display = 'none';
                    
                    showMessage('Upload cancelled');
                }
            });
        });
    </script>
</body>
</html> 