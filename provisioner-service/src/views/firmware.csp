<!DOCTYPE html>
<html>
<head>
    <title>Firmware Selection</title>
    <%view stylesheet %>
    <style>
        .firmware-container {
            display: flex;
            gap: 20px;
            margin-top: 20px;
        }
        
        .firmware-list {
            flex: 1;
            max-width: 50%;
        }
        
        .firmware-item {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .firmware-item:hover {
            border-color: #007bff;
            background-color: #f8f9fa;
        }
        
        .firmware-item.selected {
            border-color: #007bff;
            background-color: #e7f3ff;
        }
        
        .firmware-item.viewing {
            border: 2px solid #6c757d;
            background-color: #f1f3f4;
        }
        
        .firmware-version {
            font-size: 18px;
            font-weight: bold;
            color: #333;
            margin-bottom: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .selected-indicator {
            background-color: #28a745;
            color: white;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
            text-transform: uppercase;
        }
        
        .firmware-details {
            font-size: 14px;
            color: #666;
            margin-bottom: 5px;
        }
        
        .release-channel {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
            text-transform: uppercase;
        }
        
        .release-channel.default {
            background-color: #28a745;
            color: white;
        }
        
        .release-channel.latest {
            background-color: #007bff;
            color: white;
        }
        
        .release-channel.beta {
            background-color: #ffc107;
            color: black;
        }
        
        .release-channel.stable {
            background-color: #6c757d;
            color: white;
        }
        
        .release-channel.critical {
            background-color: #dc3545;
            color: white;
        }
        
        .firmware-notes {
            flex: 1;
            max-width: 50%;
        }
        
        .notes-container {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            max-height: 600px;
            overflow-y: auto;
            background-color: #f8f9fa;
        }
        
        .notes-container h3 {
            margin-top: 0;
            color: #333;
        }
        
        .notes-container pre {
            white-space: pre-wrap;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            font-size: 14px;
            line-height: 1.5;
        }
        
        .no-selection {
            text-align: center;
            color: #666;
            font-style: italic;
            padding: 50px 20px;
        }
        
        .device-info {
            background-color: #e9ecef;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
        }
        
        .device-info h3 {
            margin-top: 0;
            color: #495057;
        }
        
        .select-button {
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 8px 16px;
            cursor: pointer;
            font-size: 14px;
            margin-top: 10px;
        }
        
        .select-button:hover {
            background-color: #0056b3;
        }
        
        .select-button:disabled {
            background-color: #6c757d;
            cursor: not-allowed;
        }
        
        .success-message {
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 20px;
            display: none;
        }
        
        .error-message {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 20px;
            display: none;
        }
    </style>
</head>
<body>
    <%view navbar %>

    <h1>Firmware Selection</h1>
    
    <div id="success-message" class="success-message">
        Firmware selection saved successfully!
    </div>
    
    <div id="error-message" class="error-message"></div>

    <%c++ 
    auto deviceFamily = @@.get<std::string>("deviceFamily");
    auto chipNumber = @@.get<std::string>("chipNumber");
    auto firmwareList = @@.get<std::vector<std::map<std::string, std::string>>>("firmwareList");
    auto selectedFirmwareFile = @@.get<std::string>("selectedFirmwareFile");
    %>

    <div class="device-info">
        <h3>Device Configuration</h3>
        <%c++ if (!deviceFamily.empty()) { %>
            <p><strong>Device Family:</strong> Raspberry Pi <%c++ $$ << deviceFamily; %></p>
            <p><strong>Chip:</strong> BCM<%c++ $$ << chipNumber; %></p>
        <%c++ } else { %>
            <p class="warning">⚠️ No device family configured. Please set RPI_DEVICE_FAMILY in the options before selecting firmware.</p>
        <%c++ } %>
    </div>

    <%c++ if (!deviceFamily.empty() && !firmwareList.empty()) { %>
        <div class="firmware-container">
            <div class="firmware-list">
                <h3>Available Firmware Versions</h3>
                <%c++ for (const auto& firmware : firmwareList) { %>
                    <%c++ bool isSelected = (!selectedFirmwareFile.empty() && firmware.at("filepath") == selectedFirmwareFile); %>
                    <div class="firmware-item<%c++ if(isSelected) $$ << " selected"; %>" 
                         data-firmware-path="<%c++ $$ << firmware.at("filepath"); %>" 
                         data-version="<%c++ $$ << firmware.at("version"); %>"
                         data-release-channel="<%c++ $$ << firmware.at("releaseChannel"); %>"
                         role="button" 
                         tabindex="0"
                         aria-label="Select firmware version <%c++ $$ << firmware.at("version"); %><%c++ if(isSelected) $$ << " (currently selected)"; %>"
                         <%c++ if(isSelected) { %>aria-pressed="true"<%c++ } else { %>aria-pressed="false"<%c++ } %>>
                        <div class="firmware-version">
                            <span><%c++ $$ << firmware.at("version"); %></span>
                            <%c++ if(isSelected) { %>
                                <span class="selected-indicator">Selected</span>
                            <%c++ } %>
                        </div>
                        <div class="firmware-details">
                            <span class="release-channel <%c++ $$ << firmware.at("releaseChannel"); %>"><%c++ $$ << firmware.at("releaseChannel"); %></span>
                            <span style="margin-left: 10px;">Size: <%c++ $$ << std::to_string(std::stoi(firmware.at("size")) / 1024); %> KB</span>
                        </div>
                        <div class="firmware-details">
                            <small><%c++ $$ << firmware.at("filename"); %></small>
                        </div>
                        <button class="select-button" onclick="selectFirmware('<%c++ $$ << firmware.at("filepath"); %>')">Select This Version</button>
                    </div>
                <%c++ } %>
            </div>
            
            <div class="firmware-notes">
                <h3>Release Notes</h3>
                <div class="notes-container">
                    <div class="no-selection">
                        Click on a firmware version to view release notes
                    </div>
                </div>
            </div>
        </div>
    <%c++ } else if (!deviceFamily.empty()) { %>
        <div class="error-message" style="display: block;">
            No firmware versions found for device family <%c++ $$ << deviceFamily; %>. Please check your system configuration.
        </div>
    <%c++ } %>

    <script>
        let selectedFirmwarePath = '';
        
        // Function to show release notes (doesn't change selection)
        function showFirmwareNotes(item) {
            // Remove visual focus from all items
            document.querySelectorAll('.firmware-item').forEach(i => {
                i.classList.remove('viewing');
            });
            
            // Add visual focus to clicked item (different from selected)
            item.classList.add('viewing');
            
            // Get version and load release notes
            const version = item.dataset.version;
            loadReleaseNotes(version);
        }
        
        // Function to actually select firmware (updates config)
        function markFirmwareAsSelected(firmwarePath) {
            // Remove selected indicators from all items
            document.querySelectorAll('.firmware-item').forEach(i => {
                i.setAttribute('aria-pressed', 'false');
                const existingIndicator = i.querySelector('.selected-indicator');
                if (existingIndicator) {
                    existingIndicator.remove();
                }
            });
            
            // Find the item with this firmware path and mark it as selected
            const selectedItem = document.querySelector(`[data-firmware-path="${firmwarePath}"]`);
            if (selectedItem) {
                selectedItem.setAttribute('aria-pressed', 'true');
                
                // Add selected indicator to the version header
                const versionHeader = selectedItem.querySelector('.firmware-version');
                if (versionHeader && !versionHeader.querySelector('.selected-indicator')) {
                    const indicator = document.createElement('span');
                    indicator.className = 'selected-indicator';
                    indicator.textContent = 'Selected';
                    versionHeader.appendChild(indicator);
                }
            }
        }

        // Add click and keyboard handlers to firmware items
        document.querySelectorAll('.firmware-item').forEach(item => {
            item.addEventListener('click', function() {
                showFirmwareNotes(this);
            });
            
            item.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    showFirmwareNotes(this);
                }
            });
        });
        
        async function loadReleaseNotes(version) {
            const notesContainer = document.querySelector('.notes-container');
            notesContainer.innerHTML = '<p>Loading release notes...</p>';
            
            try {
                const response = await fetch(`/options/firmware/notes/${version}`);
                if (response.ok) {
                    const data = await response.json();
                    if (data.notes && data.notes.trim()) {
                        notesContainer.innerHTML = `
                            <h3>Release Notes for ${version}</h3>
                            <pre>${data.notes}</pre>
                        `;
                    } else {
                        notesContainer.innerHTML = `
                            <h3>Release Notes for ${version}</h3>
                            <p>No specific release notes available for this version.</p>
                        `;
                    }
                } else {
                    notesContainer.innerHTML = '<p>Error loading release notes.</p>';
                }
            } catch (error) {
                console.error('Error loading release notes:', error);
                notesContainer.innerHTML = '<p>Error loading release notes.</p>';
            }
        }
        
        async function selectFirmware(firmwarePath) {
            if (!firmwarePath) {
                showError('No firmware path specified');
                return;
            }
            
            try {
                const response = await fetch('/options/firmware/set', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        firmware_path: firmwarePath
                    })
                });
                
                if (response.ok) {
                    // Mark this firmware as selected
                    markFirmwareAsSelected(firmwarePath);
                    
                    // Get version info for success message
                    const selectedItem = document.querySelector(`[data-firmware-path="${firmwarePath}"]`);
                    if (selectedItem) {
                        const version = selectedItem.dataset.version;
                        const channel = selectedItem.dataset.releaseChannel;
                        showSuccess(`Firmware ${version} (${channel}) selected successfully!`);
                    } else {
                        showSuccess('Firmware selected successfully!');
                    }
                } else {
                    const errorData = await response.json();
                    showError(errorData.message || 'Failed to save firmware selection');
                }
            } catch (error) {
                console.error('Error selecting firmware:', error);
                showError('Failed to save firmware selection');
            }
        }
        
        function showSuccess(message) {
            const successDiv = document.getElementById('success-message');
            successDiv.textContent = message;
            successDiv.style.display = 'block';
            
            // Hide after 3 seconds
            setTimeout(() => {
                successDiv.style.display = 'none';
            }, 3000);
        }
        
        function showError(message) {
            const errorDiv = document.getElementById('error-message');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
            
            // Hide after 5 seconds
            setTimeout(() => {
                errorDiv.style.display = 'none';
            }, 5000);
        }
    </script>
</body>
</html> 