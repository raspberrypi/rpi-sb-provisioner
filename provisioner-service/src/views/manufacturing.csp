<!DOCTYPE html>
<html>
<head>
    <title>Manufacturing Database</title>
    <%view stylesheet %>
    <style>
        .table-container {
            overflow-x: auto;
            max-height: 80vh;
            margin-top: 20px;
            /* Make scrollbars always visible */
            scrollbar-width: thin;  /* For Firefox */
            scrollbar-color: rgba(0, 0, 0, 0.5) rgba(0, 0, 0, 0.1);  /* For Firefox */
            /* Additional visual cues for Safari */
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #fafafa;
            padding: 2px;
            position: relative;
        }
        
        /* For Webkit browsers (Chrome, Safari, etc.) */
        .table-container::-webkit-scrollbar {
            width: 10px;
            height: 10px;
            display: block;
            -webkit-appearance: scrollbar;
        }
        
        .table-container::-webkit-scrollbar-track {
            background: rgba(0, 0, 0, 0.1);
            border-radius: 4px;
        }
        
        .table-container::-webkit-scrollbar-thumb {
            background: rgba(0, 0, 0, 0.5);
            border-radius: 4px;
        }
        
        /* Scroll indicator for Safari */
        .scroll-indicator {
            position: absolute;
            right: 10px;
            bottom: 10px;
            background-color: rgba(0,0,0,0.6);
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            z-index: 100;
            opacity: 0.8;
        }
        
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .export-btn {
            background-color: #4CAF50;
            color: white;
            padding: 8px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        .export-btn:hover {
            background-color: #45a049;
        }
        
        /* Tooltip styles */
        .emmc-size {
            cursor: help;
            text-decoration: underline dotted #666;
        }

        /* Toggle switch styles */
        .toggle-container {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
            margin-right: 10px;
        }
        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 24px;
        }
        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        input:checked + .toggle-slider {
            background-color: #0066cc;
        }
        input:checked + .toggle-slider:before {
            transform: translateX(26px);
        }
        #refresh-status {
            margin-left: 10px;
            font-size: 0.9em;
            color: #666;
        }
        
        .error-message {
            background-color: #ffebee;
            color: #d32f2f;
            padding: 15px;
            border-radius: 4px;
            margin: 15px 0;
            border-left: 5px solid #d32f2f;
        }
    </style>
</head>
<body>
    <%view navbar %>

    <%c++ 
    bool hasWarning = false;
    std::string warningMessage;
    try {
        warningMessage = @@.get<std::string>("warning");
        hasWarning = !warningMessage.empty();
    } catch(...) {
        // No warning message found, ignore
    }
    
    if (hasWarning) { 
    %>
    <div class="warning-block">
        <%c++ $$ << warningMessage; %>
    </div>
    <%c++ } %>

    <div class="page-header">
        <h1>Manufacturing Database</h1>
        <button id="exportCsv" class="export-btn">Export to CSV</button>
    </div>
    
    <div class="toggle-container">
        <label class="toggle-switch">
            <input type="checkbox" id="auto-refresh" checked>
            <span class="toggle-slider"></span>
        </label>
        <span>Auto Refresh</span>
        <span id="refresh-status">(Enabled - refreshing every 5s)</span>
    </div>
    
    <div id="error-container"></div>
    
    <div class="table-container" id="manu-table-container">
        <div class="scroll-indicator">Scroll to see more</div>
        <!-- Initial table will be created by JavaScript -->
    </div>

    <script>
        // Handle scroll indicator visibility
        function updateScrollIndicator() {
            const container = document.querySelector('.table-container');
            const indicator = document.querySelector('.scroll-indicator');
            
            // Show indicator only if horizontal scrolling is possible
            if (container.scrollWidth > container.clientWidth) {
                indicator.style.display = 'block';
                
                // Hide after scrolling or after 5 seconds
                container.addEventListener('scroll', function() {
                    indicator.style.display = 'none';
                }, {once: true});
                
                setTimeout(function() {
                    indicator.style.display = 'none';
                }, 5000);
            } else {
                indicator.style.display = 'none';
            }
        }
        
        // Format bytes to human-readable size
        function formatBytes(bytes, decimals = 2) {
            if (bytes === 0 || isNaN(parseInt(bytes))) return '0 Bytes';
            
            const k = 1024;
            const sizes = ['Bytes', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            
            return parseFloat((bytes / Math.pow(k, i)).toFixed(decimals)) + ' ' + sizes[i];
        }
        
        // Apply human-readable sizes to eMMC size cells
        function applyEmmcSizeTooltips() {
            const emmcCells = document.querySelectorAll('.emmc-size');
            emmcCells.forEach(cell => {
                const sizeInBytes = cell.getAttribute('data-size');
                const humanSize = formatBytes(parseInt(sizeInBytes));
                cell.setAttribute('title', humanSize);
            });
        }
        
        // Function to fetch and update the manufacturing table
        async function refreshManufacturingTable() {
            try {
                const response = await fetch('/api/v2/manufacturing');
                
                if (!response.ok) {
                    throw new Error(`Failed to fetch data: ${response.status} ${response.statusText}`);
                }
                
                const data = await response.json();
                
                // Create a new table with the updated data
                let tableHtml = `
                    <table id="manufacturingTable">
                        <thead>
                            <tr>
                                <th>Provision Time</th>
                                <th>ID</th>
                                <th>Board</th>
                                <th>Serial</th>
                                <th>Ethernet MAC</th>
                                <th>WiFi MAC</th>
                                <th>Bluetooth MAC</th>
                                <th>eMMC Size</th>
                                <th>eMMC CID</th>
                                <th>RPi DUID</th>
                                <th>Revision</th>
                                <th>Processor</th>
                                <th>Memory</th>
                                <th>Manufacturer</th>
                                <th>Secure</th>
                            </tr>
                        </thead>
                        <tbody>
                `;
                
                if (data && data.length > 0) {
                    data.forEach(device => {
                        tableHtml += `
                            <tr>
                                <td>${device.provision_ts || ''}</td>
                                <td>${device.id || ''}</td>
                                <td>${device.boardname || ''}</td>
                                <td>${device.serial || ''}</td>
                                <td>${device.eth_mac || ''}</td>
                                <td>${device.wifi_mac || ''}</td>
                                <td>${device.bt_mac || ''}</td>
                                <td class="emmc-size" data-size="${device.mmc_size || ''}">${device.mmc_size || ''}</td>
                                <td>${device.mmc_cid || ''}</td>
                                <td>${device.rpi_duid || ''}</td>
                                <td>${device.board_revision || ''}</td>
                                <td>${device.processor || ''}</td>
                                <td>${device.memory || ''}</td>
                                <td>${device.manufacturer || ''}</td>
                                <td>${device.secure || ''}</td>
                            </tr>
                        `;
                    });
                } else {
                    tableHtml += `
                        <tr>
                            <td colspan="15" class="no-devices">No manufacturing data available</td>
                        </tr>
                    `;
                }
                
                tableHtml += `
                        </tbody>
                    </table>
                `;
                
                // Update the table container without showing/hiding elements
                document.getElementById('manu-table-container').innerHTML = tableHtml;
                
                // Apply tooltips and update UI after the table is updated
                applyEmmcSizeTooltips();
                updateScrollIndicator();
                
                return true;
            } catch (error) {
                console.error('Error fetching manufacturing data:', error);
                
                // Show error message
                document.getElementById('error-container').innerHTML = `
                    <div class="error-message">
                        <strong>Error loading data:</strong> ${error.message || 'Failed to fetch manufacturing data'}
                    </div>
                `;
                
                return false;
            }
        }
        
        // Export table to CSV
        document.getElementById('exportCsv').addEventListener('click', function() {
            // Get the table
            const table = document.getElementById('manufacturingTable');
            let csvContent = "data:text/csv;charset=utf-8,";
            
            // Get header row
            const headerRow = table.querySelector('thead tr');
            const headers = [];
            headerRow.querySelectorAll('th').forEach(th => {
                headers.push('"' + th.innerText + '"');
            });
            csvContent += headers.join(',') + '\r\n';
            
            // Get data rows
            const rows = table.querySelectorAll('tbody tr');
            rows.forEach(row => {
                const rowData = [];
                row.querySelectorAll('td').forEach(cell => {
                    rowData.push('"' + (cell.innerText || '') + '"');
                });
                if (rowData.length > 1) { // Skip empty rows
                    csvContent += rowData.join(',') + '\r\n';
                }
            });
            
            // Create download link
            const encodedUri = encodeURI(csvContent);
            const link = document.createElement('a');
            link.setAttribute('href', encodedUri);
            link.setAttribute('download', 'manufacturing_data_' + new Date().toISOString().split('T')[0] + '.csv');
            document.body.appendChild(link);
            
            // Download the CSV file
            link.click();
            document.body.removeChild(link);
        });

        // Auto-refresh functionality
        let refreshInterval;
        const refreshToggle = document.getElementById('auto-refresh');
        const refreshStatus = document.getElementById('refresh-status');
        
        // Load data initially
        document.addEventListener('DOMContentLoaded', function() {
            // Do initial load
            refreshManufacturingTable();
            
            // Initialize auto-refresh based on toggle state
            if (refreshToggle.checked) {
                startRefresh();
            }
        });
        
        // Function to start the refresh interval
        function startRefresh() {
            // Use 5 seconds refresh rate to reduce server load
            refreshInterval = setInterval(refreshManufacturingTable, 5000);
            refreshStatus.textContent = '(Enabled - refreshing every 5s)';
        }
        
        // Function to stop the refresh interval
        function stopRefresh() {
            clearInterval(refreshInterval);
            refreshStatus.textContent = '(Disabled)';
        }
        
        // Toggle auto-refresh when the checkbox is changed
        refreshToggle.addEventListener('change', function() {
            if (this.checked) {
                startRefresh();
            } else {
                stopRefresh();
            }
        });
    </script>
</body>
</html> 